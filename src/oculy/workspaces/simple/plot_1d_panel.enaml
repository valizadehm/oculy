# --------------------------------------------------------------------------------------
# Copyright 2020-2021 by Oculy Authors, see git history for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# --------------------------------------------------------------------------------------
"""Panel displaying 1D plots.

"""
from enaml.core.api import Looper
from enaml.layout.api import HSplitLayout, VSplitLayout, vbox, hbox
from enaml.widgets.api import (
    Notebook,
    DockArea,
    DockItem,
    Container,
    GroupBox,
    Page,
    CheckBox,
    PushButton,
    ObjectCombo,
    Label,
    ToolButton
)

from gild.utils.widgets.list_editor import ListEditor
from gild.utils.widgets.qt_list_str_widget import QtListStrWidget

from oculy.plotting.plot_widget import FigureWidget
from .mask_view import MaskView

enamldef DataSelection1DPlot(Page):
    """Selection for generating 1D plots."""

    #: Reference to the 1D plot model driving this widget
    attr plot_model

    #: Are we using a common x-axis across all plot
    attr common_xaxis : bool

    title = "1D plots data selection"

    Container:
        GroupBox:
            title = "X axis"
            flat = True
            visible << not common_xaxis
            QtListStrWidget:
                items = []
                items << list(workspace.file_content)
                items ::
                    if items and selected_item not in items:
                        self.selected_item = items[0]
                sort = False
                selected_item := plot_model.selected_x_axis

        GroupBox:
            title = "Y axes"
            flat = True
            QtListStrWidget:
                multiselect = True
                sort = False
                items = []
                items << list(workspace.file_content)
                items ::
                    if items and selected_item not in items:
                        self.selected_item = items[-1]
                selected_items := plot_model.selected_y_axes

        GroupBox:
            title = "Filtering"
            flat = True
            ListEditor(MaskView): m_ed:
                m_ed.model = plot_model
                m_ed.iterable_name = "filters"
                m_ed.operations = {
                    "add": plot_model._add_filter,
                    "remove": plot_model._remove_filter,
                }
        GroupBox:
            title = "Transformations"
            # FIXME Deal with transformation later


enamldef DataSelection1DPanel(DockItem):
    """Widget to select data to be plotted in 1D plots.

    Expect the panel_model to be available in the parent scope.

    """

    #: Number of plots to display
    alias displayed_plots_nb: plt_nb.selected

    closable = False

    Container:

        constraints = [
            vbox(
                hbox(lab_plt_nb, plt_nb),
                common_xaxis.when(common_xaxis.visible),
                x_axis.when(x_axis.visible),
                nb,
                hbox(auto_re, re)
            )
        ]

        Label: lab_plt_nb:
            text = "# plots"
        ObjectCombo: plt_nb:
            enabled = False
            items = [1, 2, 3, 4]
            selected = 1
            # FIXME Provide ways to specify the layout in addition to the number
            # of plots
            # FIXME when changing the number of plots store previous layout and restore
            # when going back to the same number of plots.
        CheckBox: common_xaxis:
            text = "Common x-axis"
            visible << (plt_nb.selected > 1)
            checked = False

        GroupBox: x_axis:
            visible << common_xaxis.checked
            title = "X axis"
            flat = True
            QtListStrWidget:
                sort = False
                items << list(workspace.file_content)
                selected_item << panel_model.models[0].selected_x_axis
                selected_item ::
                    for m in panel_model.models:
                        m.selected_x_axis = change["value"]

        Notebook: nb:
            tabs_closable = False
            tabs_movable = False
            Looper:
                iterable << range(plt_nb.selected)
                DataSelection1DPlot:
                    plot_model << panel_model.models[loop_item]
                    common_xaxis << common_xaxis.checked

        CheckBox: auto_re:
            text = "Auto-refresh"
            checked := panel_model.auto_refresh
        PushButton: re:
            text = "Refresh"
            clicked::
                for m in panel_model.models:
                    m.refresh_plot()


enamldef Plot1DDockItem(DockItem):
    """Dock item hosting a single 1D plot."""

    # Plot1DModel driving the UI
    attr model

    closable = False

    Container:
        FigureWidget:
            figure = model._figure


# workspace is accessible in the parent scope
enamldef Plot1DPanel(DockItem):
    """Panel holding the selection controls and the 1d plot panes."""

    #: Model driving the view
    attr panel_model

    closable = False

    Container:
        DockArea: area:
            layout = HSplitLayout(
                "selection", "plot_1",
                sizes=[1, 5000]
            )

            style = "metro"

            attr _layout_cache: dict = {}

            func generate_dock_layout():
                pass

            DataSelection1DPanel: d_sel:
                name = "selection"
                title = "Data selection"
                displayed_plots_nb::
                    pass  # need to update plots and then layout based on cache
            Looper: plots:
                iterable = list(range(d_sel.displayed_plots_nb))
                Plot1DDockItem:
                    name << f"plot_{loop.item + 1}"
                    title << f"Plot {loop.item + 1}    "
                    model << panel_model.models[loop.item]
