# --------------------------------------------------------------------------------------
# Copyright 2020 by Oculy Authors, see git history for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# --------------------------------------------------------------------------------------
"""Plotting plugin manifest.

"""
from typing import TYPE_CHECKING

from enaml.workbench.api import PluginManifest, Extension, ExtensionPoint

from .backends import Backend
from .plots import (
    Axes,
    Axis,
    Colorbar,
    Cursor,
    Plot,
    Figure,
    Plot1DLine,
    Plot1DBar,
    Plot2DRectangularMesh,
    Plot2DContour
)


if TYPE_CHECKING:
    from .plugin import Plo

def plotting_plugin_factory() -> "PlottingPlugin":
    """ Factory funcion for the plotting plugin.

    """
    from .plugin import PlottingPlugin
    return PlottingPlugin()


enamldef PlottingManifest(PluginManifest):
    """Manifest of the plotting plugin.

    """
    id = "oculy.plotting"
    factory = plotting_plugin_factory

    ExtensionPoint:
        id = "plots"

    ExtensionPoint:
        id = "rendering-backends"

    Extension:
        id = "builtin-plots"
        point = "oculy.plotting.plots"
        Plot:
            id = "line-plot"
            description = "Line plot supporting markers."
            get_cls => ():
                return Plot1DLine
        Plot:
            id = "histogram"
            description = "Histogram as a bar plot with contiguous bars."
            get_cls => ():
                return Plot1DHistogram
        Plot:
            id = "rectangular-mesh"
            description = "Color plot on a reactangular mesh."
            get_cls => ():
                return Plot2DRectangularMesh
        Plot:
            id = "contour"
            description = "Contour plot."
            get_cls => ():
                return Plot2DContour

    Extension:
        id = "matplotlib-backend"
        point = "oculy.plotting.rendering-backends"
        Backend:
            id = "matplotlib"
            description = "Backend running on Matplolib an if available mplcairo"
            proxies => ():
                from .backends.matplotlib import (
                    MatplotlibAxesProxy,
                    MatplotlibAxisProxy,
                    MatplotlibColorbarProxy,
                    MatplotlibCursorProxy,
                    MatplotlibFigureProxy,
                )
                return {Axes: MatplotlibAxesProxy,
                        Axis: MatplotlibAxisProxy,
                        Colorbar: MatplotlibColorbarProxy,
                        Cursor: MatplotlibCursorProxy,
                        Figure: MatplotlibFigureProxy}
            plot_proxies => ():
                from .backends.matplotlib import (
                    Matplotlib1DLineProxy,
                    Matplotlib1DBarProxy,
                    Matplotlib2DRectangularMeshProxy,
                    Matplotlib2DContourProxy
                )
                return {Plot1DLine: Matplotlib1DLineProxy,
                        Plot1DBar: Matplotlib1DBarProxy,
                        Plot2DRectangularMesh: Matplotlib2DRectangularMeshProxy,
                        Plot2DContour: Matplotlib2DContourProxy}
            colormaps => ():
                return {
                    "Perceptually Uniform ": [
                        "viridis", "plasma", "inferno", "magma", "cividis"
                    ],
                    "Sequential": [
                        "Greys", "Purples", "Blues", "Greens", "Oranges", "Reds",
                        "YlOrBr", "YlOrRd", "OrRd", "PuRd", "RdP", "BuP",
                        "GnB", "PuB", "YlGnB", "PuBuGn", "BuGn", "YlGn",
                        "binary", "gist_yarg", "gist_gray", "gray", "bone", "pink",
                        "spring", "summer", "autumn", "winter", "cool", "Wistia",
                        "hot", "afmhot", "gist_heat", "copper"
                    ],
                    "Diverging": [
                        "PiYG", "PRGn", "BrBG", "PuOr", "RdGy", "RdB",
                        "RdYlB", "RdYlGn", "Spectral", "coolwarm", "bwr", "seismic"
                    ]
                }

    # FIXME should have commands I guess
